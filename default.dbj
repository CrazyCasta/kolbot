// default.dbj gets executed upon gamejoin
js_strict(true);

include("json2.js");
include("NTItemParser.dbl");
include("OOG.js");
include("AutoMule.js");
include("Gambling.js");
include("TorchSystem.js");
include("MuleLogger.js");
include("common/Attack.js");
include("common/Cubing.js");
include("common/CollMap.js");
include("common/Config.js");
include("common/Loader.js");
include("common/Misc.js");
include("common/Pickit.js");
include("common/Pather.js");
include("common/Precast.js");
include("common/Prototypes.js");
include("common/Runewords.js");
include("common/Storage.js");
include("common/Town.js");

var gidList = []; // fast pickit

function main() {
	if (!getScript("tools/heartbeat.js")) {
		load("tools/heartbeat.js");
	}

	// wait until game is ready
	while (!me.gameReady || typeof copyUnit(me).classid === "undefined") {
		delay(50);
	}

	// don't load default for mules
	if (me.profile === AutoMule.Mule.muleProfile || me.profile === AutoMule.TorchMule.muleProfile) {
		return true;
	}

	// mule logger stuff
	if (me.gamename.toLowerCase().indexOf(MuleLogger.LogGame[0].toLowerCase()) > -1) {
		MuleLogger.logChar();

		while ((getTickCount() - me.gamestarttime) < MuleLogger.IngameTime * 1000) {
			delay(1000);
		}

		quit();
		delay(10000);

		return true;
	}

	var i, sojPause,
		sojCounter = 0,
		startTime = getTickCount();

	this.itemEvent = function (gid, mode, code, global) {
		if (gid > 0 && mode === 0) {
			gidList.push(gid);
		}
	};

	this.scriptEvent = function (msg) {
		switch (msg) {
		case "soj":
			sojPause = true;
			sojCounter = 0;

			break;
		}
	};

	// If game name is a part of Gambling System, don't load scripts
	if (Gambling.goldFinders.indexOf(me.profile) > -1) {
		for (i = 0; i < Gambling.gambleGames.length; i += 1) {
			if (me.gamename.match(Gambling.gambleGames[i])) {
				Gambling.dropGold();
				DataFile.updateStats("gold");
				delay(5000);
				quit();
				delay(10000);
			}
		}
	}

	// Initialize libs - load config variables, build pickit list, attacks, containers and cubing and runeword recipes
	Config.init(true);
	Pickit.init();
	Attack.init();
	Storage.Init();
	Cubing.init();
	Runewords.init();

	// AutoMule handler
	AutoMule.inGameCheck();

	// TorchSystem handler
	TorchSystem.inGameCheck();

	// TODO: Consolidate Gambling System
	me.maxgametime = Config.MaxGameTime * 1000;

	if (me.getStat(13) < DataFile.getStats().experience) { // check for experience decrease -> log death
		D2Bot.printToConsole("You died in last game;9");
		D2Bot.printToConsole("Experience decreased by " + (DataFile.getStats().experience - me.getStat(13)) + ";9");
		DataFile.updateDeaths();
	}

	DataFile.updateStats("experience");

	// Load Fastmod
	Packet.changeStat(105, Config.FCR);
	Packet.changeStat(99, Config.FHR);
	Packet.changeStat(102, Config.FBR);
	Packet.changeStat(93, Config.IAS);

	// Load events and threads
	addEventListener("scriptmsg", this.scriptEvent);
	load("tools/ToolsThread.js");
	load("tools/TownChicken.js");

	if (Config.PublicMode) {
		load("tools/Party.js");
	}

	if (Config.AntiHostile) {
		load("tools/AntiHostile.js");
	}

	if (Config.FastPick) {
		print("ÿc2Fast pickit active.");
		addEventListener("itemaction", this.itemEvent);
	}
	
	// One time maintenance - get corpse, clear leftover items, pick items in case anything important was dropped
	if (!Scripts.UserAddon && !Scripts.Test) {
		Town.getCorpse();
		Town.clearBelt();
		Town.clearInventory();
		Pickit.pickItems();
	}

	// Next game = drop keys
	if (TorchSystem.keyCheck()) {
		scriptBroadcast("torch");
	}

	// Go
	Loader.init();

	if (Config.MinGameTime && getTickCount() - startTime < Config.MinGameTime * 1000) {
		try {
			Town.goToTown();

			while (getTickCount() - startTime < Config.MinGameTime * 1000) {
				me.overhead("Stalling for " + Math.round(((startTime + (Config.MinGameTime * 1000)) - getTickCount()) / 1000) + " Seconds");
				delay(1000);
			}
		} catch (e1) {
			print(e1);
		}
	}

	DataFile.updateStats("gold");

	if (sojPause) {
		try {
			Town.goToTown();

			me.maxgametime = 0;

			while (sojCounter < Config.SoJWaitTime) {
				me.overhead("Waiting for SoJ sales... " + (Config.SoJWaitTime - sojCounter) + " min");
				delay(6e4);

				sojCounter += 1;
			}
		} catch (e2) {
			print(e2);
		}
	}

	if (Config.LastMessage) {
		say(Config.LastMessage);
	}

	scriptBroadcast("quit");

	return true;
}